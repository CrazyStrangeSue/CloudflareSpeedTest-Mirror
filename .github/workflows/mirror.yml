name: Sync Upstream Release

on:
  # 每天 UTC 时间 2 点运行一次
  schedule:
    - cron: '0 2 * * *'
  # 同样允许手动触发
  workflow_dispatch:

jobs:
  sync:
    runs-on: ubuntu-latest
    steps:
      # 步骤 1: 获取上游（原作者）的最新 Release Tag
      - name: Get latest upstream release tag
        id: get_upstream_release
        uses: joutvhu/get-release-action@v1
        with:
          owner: XIU2
          repo: CloudflareSpeedTest
          token: ${{ secrets.GITHUB_TOKEN }}

      # 步骤 2: 获取我们自己（镜像）的最新 Release Tag
      # 我们添加了 continue-on-error: true，这样即使我们仓库是空的、没有 release，这个步骤也不会失败
      - name: Get latest mirror release tag
        id: get_mirror_release
        uses: joutvhu/get-release-action@v1
        continue-on-error: true
        with:
          owner: ${{ github.repository_owner }}
          repo: ${{ github.event.repository.name }}
          token: ${{ secrets.GITHUB_TOKEN }}

      # 步骤 3: 下载上游 Release 的所有 assets
      # 我们直接在这里进行版本比较
      - name: Download assets from upstream
        if: steps.get_upstream_release.outputs.tag_name != steps.get_mirror_release.outputs.tag_name
        uses: robinraju/release-downloader@v1.8
        with:
          repository: "XIU2/CloudflareSpeedTest"
          tag: ${{ steps.get_upstream_release.outputs.tag_name }}
          token: ${{ secrets.GITHUB_TOKEN }}
          
      # 步骤 4: 在我们自己的仓库创建新 Release 并上传所有 assets
      # 同样，直接在这里进行版本比较
      - name: Create new release and upload assets
        if: steps.get_upstream_release.outputs.tag_name != steps.get_mirror_release.outputs.tag_name
        uses: softprops/action-gh-release@v1
        with:
          # 使用上游的 tag 作为我们新 Release 的 tag
          tag_name: ${{ steps.get_upstream_release.outputs.tag_name }}
          # 把下载的所有文件（*.*）都上传
          files: "./*.*"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
